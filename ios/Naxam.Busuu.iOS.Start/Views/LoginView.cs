// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.iOS.Views;
using MaterialControls;
using Naxam.Busuu.Start.ViewModel;
using ObjCRuntime;
using UIKit;

namespace Naxam.Busuu.iOS.Start
{
    [MvxFromStoryboard(StoryboardName = "Start")]
    public partial class LoginView : MvxViewController<LoginViewModel>
	{
        MDTextField fieldEmailPhone;
        MDTextField fieldPass;
        bool Is1Animating;
        bool Is2Animating;

		public LoginView (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            this.NavigationController.NavigationBarHidden = false;

			fieldEmailPhone = new MDTextField();
			fieldEmailPhone.TextColor = UIColor.FromRGB(172, 180, 186);
			fieldEmailPhone.HighlightColor = UIColor.FromRGB(57, 169, 246);
			fieldEmailPhone.LabelsFont = UIFont.SystemFontOfSize(14);
			fieldEmailPhone.InputTextFont = UIFont.SystemFontOfSize(14);
            fieldEmailPhone.ShouldBeginEditing = FieldEmailPhone_ShouldBeginEditing;
            fieldEmailPhone.ShouldEndEditing = FieldEmailPhone_ShouldEndEditing;
            fieldEmailPhone.ShouldChangeText = HandleTextFieldShouldChangeText;
			fieldEmailPhone.Layer.Frame = new CoreGraphics.CGRect(0, 0, ViewEmail.Bounds.Width, ViewEmail.Bounds.Height);

			fieldPass = new MDTextField();
			fieldPass.TextColor = UIColor.FromRGB(172, 180, 186);
			fieldPass.HighlightColor = UIColor.FromRGB(57, 169, 246);
			fieldPass.LabelsFont = UIFont.SystemFontOfSize(14);
			fieldPass.InputTextFont = UIFont.SystemFontOfSize(14);
            fieldPass.ShouldBeginEditing = FieldPass_ShouldBeginEditing;
            fieldPass.ShouldEndEditing = FieldPass_ShouldEndEditing;
            fieldPass.ShouldChangeText = HandleTextFieldShouldChangeText;
			fieldPass.Layer.Frame = new CoreGraphics.CGRect(0, 0, ViewPassword.Bounds.Width, ViewPassword.Bounds.Height);

			ViewEmail.AddSubview(fieldEmailPhone);
			ViewPassword.AddSubview(fieldPass);

			ViewShadow.Layer.ShadowRadius = 2;
			ViewShadow.Layer.ShadowOpacity = 0.25f;
			ViewShadow.Layer.ShadowOffset = new CoreGraphics.CGSize(0, 2);

            btnFacebook.ContentEdgeInsets = new UIEdgeInsets(0, 16, 0, 0);
            btnGoogle.ContentEdgeInsets = new UIEdgeInsets(0, 16, 0, 0);

			btnFacebook.Layer.CornerRadius = btnFacebook.Frame.Height / 2;
            btnGoogle.Layer.CornerRadius = btnGoogle.Frame.Height / 2;

			viewbtnFacebook.Layer.CornerRadius = viewbtnFacebook.Frame.Height / 2;
			viewbtnGoogle.Layer.CornerRadius = viewbtnGoogle.Frame.Height / 2;

            viewbtnFacebook.Layer.ShadowRadius = 1.5f;
            viewbtnFacebook.Layer.ShadowOpacity = 0.25f;
            viewbtnFacebook.Layer.ShadowOffset = new CoreGraphics.CGSize(0, 1.5f);

            viewbtnGoogle.Layer.ShadowRadius = 1.5f;
            viewbtnGoogle.Layer.ShadowOpacity = 0.25f;
            viewbtnGoogle.Layer.ShadowOffset = new CoreGraphics.CGSize(0, 1.5f);

            btnLogin.Layer.CornerRadius = btnLogin.Frame.Height / 2;

            var setBind = this.CreateBindingSet<LoginView, LoginViewModel>();
            setBind.Bind(btnFacebook).To(vm => vm.LoginCommend);
            setBind.Bind(btnGoogle).To(vm => vm.LoginCommend);
            setBind.Bind(btnLogin).To(vm => vm.LoginCommend);
            setBind.Bind(btnForgotPassword).To(vm => vm.ForgotPasswordCommand);
            setBind.Bind(fieldEmailPhone).For(vm => vm.Text).To(vm => vm.TextEmail);
            setBind.Bind(fieldPass).For(vm => vm.Text).To(vm => vm.TextPass);
            setBind.Bind(btnLogin).For(vm => vm.Enabled).To(vm => vm.IsEnableLoginBtn);
			setBind.Apply();
		}

        bool FieldEmailPhone_ShouldBeginEditing(MDTextField textField)
        {
			Is1Animating = true;
            if (!Is2Animating)
            {
                StartAnimation();
            }
            else
            {
                Is2Animating = false;
            }

			fieldEmailPhone.TextColor = UIColor.Black;
            if (fieldEmailPhone.Text == "Email address or phone number")
            {
                fieldEmailPhone.Text = "";          
            }

            return true;
        }

        bool FieldEmailPhone_ShouldEndEditing(MDTextField textField)
        {
            if (Is1Animating && !Is2Animating)
            {
                Is1Animating = false;
                StopAnimation();
            }

            fieldEmailPhone.TextColor = UIColor.FromRGB(172, 180, 186);
            if (fieldEmailPhone.Text == "")
            {
                fieldEmailPhone.Text = "Email address or phone number";
            }

            return true;
        }

		bool FieldPass_ShouldBeginEditing(MDTextField textField)
		{
			Is2Animating = true;
            if (!Is1Animating)
            {
                StartAnimation();
            }		
            else
            {
				Is1Animating = false;
            }

            fieldPass.TextColor = UIColor.Black;
            fieldPass.SecureTextEntry = true;
            if (fieldPass.Text == "Password (minimum 6 characters)")
			{
                fieldPass.Text = "";
			}

			return true;
		}

		bool FieldPass_ShouldEndEditing(MDTextField textField)
		{
            if (Is2Animating && !Is1Animating)
            {
                Is2Animating = false;
                StopAnimation();
            }

            fieldPass.TextColor = UIColor.FromRGB(172, 180, 186);
            if (fieldPass.Text == "")
			{
                fieldPass.SecureTextEntry = false;
                fieldPass.Text = "Password (minimum 6 characters)";
			}

			return true;
		}

        bool HandleTextFieldShouldChangeText(MDTextField textField, NSRange range, string text)
        {
            if (btnLogin.Enabled)
            {
                btnLogin.BackgroundColor = UIColor.FromRGB(57, 169, 246);
                btnLogin.Layer.ShadowRadius = 1.5f;
				btnLogin.Layer.ShadowOpacity = 0.25f;
				btnLogin.Layer.ShadowOffset = new CoreGraphics.CGSize(0, 1.5f);
            }
            else
            {
                btnLogin.BackgroundColor = UIColor.FromRGB(214, 222, 230);
				btnLogin.Layer.ShadowRadius = 0;
				btnLogin.Layer.ShadowOpacity = 0;
				btnLogin.Layer.ShadowOffset = new CoreGraphics.CGSize(0, 0);
            }

            return true;
        }

        void StartAnimation()
        {
            UIView.BeginAnimations("connectAnimation");
            UIView.SetAnimationDuration(0.25);
            UIView.SetAnimationCurve(UIViewAnimationCurve.EaseOut);
            UIView.SetAnimationDelegate(this);
            UIView.SetAnimationDidStopSelector(new Selector("animationDidStop:finished:context:"));
            viewConnect.Alpha = 0;
            UIView.CommitAnimations();
        }

        void StopAnimation()
        {
            UIView.BeginAnimations("connectAnimation");
            UIView.SetAnimationDuration(0.25);
            UIView.SetAnimationCurve(UIViewAnimationCurve.EaseOut);
            UIView.SetAnimationDelegate(this);
            UIView.SetAnimationDidStopSelector(new Selector("animationDidStop:finished:context:"));
            viewConnect.Alpha = 1;
            UIView.CommitAnimations();
        }

		void StartAnimationC()
		{
            viewConnectTopConstraint.Constant =- viewConnect.Frame.Height;
			View.UpdateConstraintsIfNeeded();
			UIView.AnimateNotify(0.25, () =>
			{
				View.LayoutIfNeeded();
			}, (finished) =>
			{
				//IsAnimating = false;
			});
		}

        void StopAnimationC()
        {
			viewConnectTopConstraint.Constant = 24;
			View.UpdateConstraintsIfNeeded();
			UIView.AnimateNotify(0.25, () =>
			{
				View.LayoutIfNeeded();
			}, (finished) =>
			{
				//IsAnimating = false;
			});
        }

		[Export("animationDidStop:finished:context:")]
		void SlideStopped(NSString animationID, NSNumber finished, NSObject context)
		{
            if (Is1Animating || Is2Animating)
			{
				viewConnect.Alpha = 0;
                StartAnimationC();
			}
			else
			{
                viewConnect.Alpha = 1;
                StopAnimationC();
			}
		}

	}
}
