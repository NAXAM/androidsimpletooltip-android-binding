// This file has been autogenerated from a class added in the UI designer.

using System;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using CoreGraphics;
using Foundation;
using MvvmCross.Binding.BindingContext;
using MvvmCross.Binding.iOS.Views;
using MvvmCross.Core.ViewModels;
using MvvmCross.iOS.Views;
using MvvmCross.iOS.Views.Presenters.Attributes;
using Naxam.Busuu.iOS.Core;
using Naxam.Busuu.Learning.Model;
using Naxam.Busuu.Learning.ViewModel;
using UIKit;

namespace Naxam.Busuu.iOS.Learning.Views
{
	[MvxFromStoryboard(StoryboardName = "Learning")]
	[MvxTabPresentation(WrapInNavigationController = true, TabIconName = "learn_tab_icon", TabName = "Learn", TabSelectedIconName = "learn_tab_icon_selected")]
    public partial class MainView : MvxViewController<MainViewModel>
	{
		public MainView (IntPtr handle) : base (handle)
		{
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            var nib = UINib.FromName("LessonHeader", null);
            LessonTableView.RegisterNibForHeaderFooterViewReuse(nib, "LessonHeader");

			var buyPremiumCell = BuyPremiumCell.Create();
			buyPremiumCell.Frame = new CGRect(0, 0, View.Bounds.Size.Width, 50);
			View.AddSubview(buyPremiumCell);

			var source = new LessionTableViewSource(LessonTableView);

			LessonTableView.Source = source;

			var setBinding = this.CreateBindingSet<MainView, MainViewModel>();
			setBinding.Bind(buyPremiumCell.BtnGo).To(vm => vm.GoPremiumCommand);
            setBinding.Bind(source).To(vm => vm.Lessons);
			setBinding.Apply();

			NavigationController.NavigationBar.Layer.ShadowRadius = 2;
			NavigationController.NavigationBar.Layer.ShadowOffset = new CGSize(0, 2);
			NavigationController.NavigationBar.Layer.ShadowOpacity = 0.25f;

            NavigationItem.Title = "Learn";
        }
	}

    public class LessionTableViewSource : MvxTableViewSource, INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        IMvxCommand _downloadCommand;
		public IMvxCommand DownloadCommand
		{
			get
			{
				return _downloadCommand;
			}

			set
			{
				SetProperty(ref _downloadCommand, value);
			}
		}
		public LessionTableViewSource(UITableView tableview) : base(tableview)
		{

		}

		//public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		//{
		//	if (indexPath.Row % 2 == 1)
		//	{
		//		LessonTableViewCell cell = (LessonTableViewCell)tableView.DequeueReusableCell("lessonCell", indexPath);
		//		return cell;
		//	}
		//	else
		//	{
		//		SubLessonTableViewCell cell = (SubLessonTableViewCell)tableView.DequeueReusableCell("subCell", indexPath);
		//		return cell;
		//	}
		//}

        public override UIView GetViewForHeader(UITableView tableView, nint section)
        {
            var cell = LessonHeader.Create();
            cell.Title.Text = "Beginner A1";
            return cell;
        }

        public override nfloat GetHeightForRow(UITableView tableView, NSIndexPath indexPath)
        {
            return 80f;
        }

        public override nfloat GetHeightForHeader(UITableView tableView, nint section)
        {
            return 80;
        }

		void HandleEventHandler(object sender, LessonModel e)
		{
		}

		void SetProperty<T>(ref T backingField, T value, [CallerMemberName] string propertyName = null)
		{
			if (Equals(backingField, value)) return;

			backingField = value;

			PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
		}

        protected override UITableViewCell GetOrCreateCellFor(UITableView tableView, NSIndexPath indexPath, object item)
        {
			NSString cellIdentifier;
			if (item is LessonModel)
			{
				cellIdentifier = (Foundation.NSString)"lessonCell";
			}
			else if (item is SubLessonTableViewCell)
			{
                cellIdentifier = (Foundation.NSString)"subCell";
			}
			else
			{
				throw new ArgumentException("Unknown animal of type " + item.GetType().Name);
			}

			return (UITableViewCell)TableView.DequeueReusableCell(cellIdentifier, indexPath);
        }
    }
}
